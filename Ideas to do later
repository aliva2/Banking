Ideas to do later:

Common Tests for Banking Programs (using JUnit)

1. Account Management
    Create an account.
    Retrieve account details.
    Handle invalid account inputs.
2. Transactions
    Deposit money into an account.
    Withdraw money, ensuring there are sufficient funds.
    Prevent overdrafts or negative balances.
    Validate transaction history.
3. Balance Inquiry
    Check the current account balance.
    Verify that balances update correctly after transactions.
4. Edge Cases
    Depositing or withdrawing negative amounts.
    Operating on a nonexistent account.
    Simultaneous transactions (if multi-threading is involved). ? Probably not.
    Token check. (?)

Suggested standard of communication between API(from discord info):

"1) Card Number It should be a 16-digit number. Below is the code for generating it:
public class GeneratorUtils {

    public static String generateCardNumber() {
        Random random = new Random();
        StringBuilder cardNumber = new StringBuilder();

        for (int i = 0; i < 15; i++) {
            cardNumber.append(random.nextInt(10));
        }

        int sum = 0;
        for (int i = 0; i < 15; i++) {
            int digit = Character.getNumericValue(cardNumber.charAt(i));
            if (i % 2 == 0) {
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }
        int checksum = (10 - (sum % 10)) % 10;
        cardNumber.append(checksum);

        return cardNumber.toString();
    }
}

This way, we can make interaction with other services really easy. 
You should first check if the card number exists in your system, 
then in a simple for loop, send a request to the other system. 
This generation principle ensures that each card number is unique.

2) About the Request Itself It might contain two parts - header and body.

Header: A JWT token generated by the other system 
(for example, if you try to access my system, my system will generate a token for you. 
If I try to access your system, your system will generate a token for me). 
This makes the history of transactions clearer and also allows playing around with Spring Security.

Body:
{
    "amount": 10.0,
    "senderName": "John",
    "senderSurname": "Doe",
    "senderAccountNumber": "1234567890123456",
    "receiverName": "Jane",
    "receiverSurname": "Smith",
    "receiverAccountNumber": "6543210987654321"
}"

H2 database:

http://localhost:8080/h2-console
SELECT * FROM PUBLIC.ACCOUNTS; to see all tables
==================================================================================================================
Spring Boot - for web applications with Java. 

1. Making project, can go to spring initailizr https://start.spring.io
Choosing: 
        Maven, Java, Spring Boot version, 
        Project metadata: com.example, Artifact:Banking, Name:Banking, Package name: com.example.Banking
        Packaging:Jar (can run on any system with Java installed)
        Java:21
Dependencies:
        (Spring web) MVC - Rest API - Tomcat server - accept JSON, send JSON (get, post)
        (Spring Data JDBC --> later can use JPA) 
        (h2? ) 

Ideas from other people project presentations:
config
	security
	util
controllers
	controller exception dvice
	api controller
	login controller
	registration controller
	user controller
dto
     	change card balance dto??
	create api dto
	create user dto
	login user dto
 	maininfouser dto
	transaction dto
entities
	card
	user
	bank account
	transaction
exceptions
	cardnotfound
	notenoughfunds
	useralreadyexists
model
	errordetail
	role
services
	card service
	jwt service
	transaction service
	user service
	bank account service
utility
	generator utils
	application
repository
	bank account rep
	transaction rep
security
	custom user detail service
	autherntfication success handler
	web security config

Extra questions or ideas:
    protect vs sql injection? does spring boot does?
    swagger ui
    junit tests
    logger
    db changelog?
    templates? or swagger = swagger
